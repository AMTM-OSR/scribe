#!/bin/sh -
#
# NB: rc.func only runs PRECMD on "start"
# Last Modified: 2025-Jun-18

kill_logger()
{
    # these will be set if coming from scribe; on bootup, these will not be set
    [ -z "$script_conf" ] && script_conf="/jffs/addons/scribe.d/config"
    [ -z "$optmsg" ] && optmsg="/opt/var/log/messages"
    [ -z "$jffslog" ] && jffslog="/jffs/syslog.log"
    [ -z "$tmplog" ] && tmplog="/tmp/syslog.log"
    isjffs=false

    # figure out where syslogd expects log file to live
    if [ -z "$syslog_loc" ] # don't look for config file if $syslog_loc is defined
    then
        # $syslog_loc not set, look for config file
        if [ -f "$script_conf" ]
        then
            syslog_loc="$( /bin/grep "SYSLOG_LOC" "$script_conf" | /usr/bin/cut -f2 -d"=" )"
        # no config file and $syslog_loc is not set; check if syslogd is running 
        elif [ -n "$( /bin/pidof syslogd )" ]
        then # awk to the rescue
            sld_ps="$( /bin/ps ww | /bin/grep "/sbin/syslogd" )"
            syslog_loc="$( /usr/bin/awk -v psww="$sld_ps" 'BEGIN {
                           n=split (psww, psary)
                           for (i = 1; i <= n; i++) 
                               if ( psary[i] ~ "-O" ) break
                           print psary[i+1] }'
                         )"
        else # no config file, $syslog_loc not set, & syslogd not running!!! 
            syslog_loc="$tmplog" # no-man's land, so make a guess
        fi
    fi

    [ "$syslog_loc" = "$jffslog" ] && isjffs=true

    # kill any/all running klogd and/or syslogd
    count=30
    klgk=false
    sldk=false
    while [ $count -gt 0 ]
    do
        [ -n "$( /bin/pidof klogd )" ] && killall klogd
        [ -n "$( /bin/pidof syslogd )" ] && killall syslogd
        sleep 1 # give them a moment to shut down / unknown process to restart them
        [ -z "$( /bin/pidof klogd )" ] && klgk=true
        [ -z "$( /bin/pidof syslogd )" ] && sldk=true
        if $klgk && $sldk; then count=-1; fi
        count=$(( count - 1 ))
    done
    [ $count -eq 0 ] && exit 1

    # if syslog-ng was stopped by scribe, /opt/var/log/messages will symlink to $syslog_loc
    [ -L "$optmsg" ] && /bin/rm -f "$optmsg"

    # if syslogd was running, $syslog_loc will exist and be a regular file (not a link)
    # this might be bootup, or starting scribe 
    if [ ! -L "$syslog_loc" ]
    then
        /bin/cat "$syslog_loc" >> "$optmsg"
        /bin/rm -f "$syslog_loc" "$syslog_loc-1"
        /bin/ln -s "$optmsg" "$syslog_loc"
        echo "### Top of Log File ###" >> "$syslog_loc-1"
    fi

    # make /jffs/syslog.log and log-1 directories if default syslog location is not at /jffs
    # prevents system log saver from writing to jffs (not strictly neecessary on newer routers)
    if ! "$isjffs" && [ ! -d "$jffslog" ]
    then
        /bin/rm -rf "$jffslog" "$jffslog-1"
        /bin/mkdir "$jffslog" "$jffslog-1"
    elif "$isjffs"
    then
        # if syslogd is writing to /jffs, then ensure logfiles in /tmp
        # are properly linked in case something goes looking there
        [ ! -L "$tmplog" ] && /bin/ln -s "$optmsg" "$tmplog"
        [ ! -L "$tmplog-1" ] && /bin/ln -s "$syslog_loc-1" "$tmplog-1"
    fi

    # create /opt/var/run/syslog-ng/ directory if it doesn't exist #
    # not needed for older versions of syslog-ng, but doesn't hurt anything
    [ ! -d "/opt/var/run/syslog-ng" ] && mkdir "/opt/var/run/syslog-ng"

    # touch logrotate.status if it doesn't exist so syslog-ng doesn't whine #
    [ ! -f /var/lib/logrotate.status ] && touch /var/lib/logrotate.status

    ##----------------------------------------##
    ## Modified by Martinski W. [2025-Jun-16] ##
    ##----------------------------------------##
    # Set correct permissions to avoid "world-readable" status #
    chmod 600 /var/lib/logrotate.status

    # export timezone if not already set #
    [ -z "${TZ:+xSETx}" ] && export TZ="$( /bin/cat /etc/TZ )"
}

PRECMD="kill_logger"
# enabling the below can be useful when having problems,
# but fills up the logfile fast
#ARGS="-v"

#EOF#
