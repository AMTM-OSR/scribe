#!/bin/sh
#tof

#                        _            
#                     _ ( )           
#   ___    ___  _ __ (_)| |_      __  
# /',__) /'___)( '__)| || '_`\  /'__`\
# \__, \( (___ | |   | || |_) )(  ___/
# (____/`\____)(_)   (_)(_,__/'`\____)
#                                    
# Coded by cynicastic
#
# Version 1.x series is cli-driven
# Version 2.x series will be menu-driven (cli will still work)
#
# Original interest in syslog-ng on Asuswrt-Merlin inspired by tomsk & kvic
# Good ideas and code borrowed heavily from Adamm, Jack Yaz, thelonelycoder, & Xentrx
#
# Bad ideas and code are entirely mine
#
# install command:
#   curl --retry 3 "https://raw.githubusercontent.com/cynicastic/scribe/master/scribe" -o "/jffs/scripts/scribe" && chmod 0755 /jffs/scripts/scribe && /jffs/scripts/scribe install
#
# shellcheck disable=SC2059
# SC2059 = Don't use variables in the printf format string. Use printf "..%s.." "$foo"
# set -x


# scribe constants
action=$1
got_zip="no"
[ "X$TMP" = "X" ] && TMP=/opt/tmp

readonly scribe_ver="v0.6_2"
readonly scribe_branch="master"
readonly scribe_name="scribe"
readonly scribe_author="cynicastic"
readonly scribe_repo="https://raw.githubusercontent.com/$scribe_author/$scribe_name/$scribe_branch/$scribe_name"
readonly scribe_dir="$TMP/$scribe_name-$scribe_branch"
readonly scribe_script="/jffs/scripts/$scribe_name"

# script constants
readonly sng="syslog-ng"
readonly lr="logrotate"
readonly init_d="/opt/etc/init.d"
readonly S01sng_loc="$init_d/S01$sng"
readonly syslogngloc="/opt/sbin/$sng"
readonly logrotateloc="/opt/sbin/$lr"
readonly syslogng_conf="/opt/etc/$sng.conf"
readonly sngconf_merged="$TMP/syslog-ng-complete.conf"
readonly logrotate_conf="/opt/etc/$lr.conf"
readonly syslogng_d="/opt/etc/$sng.d"
readonly logrotate_d="/opt/etc/$lr.d"
readonly syslogng_share="/opt/share/$sng"
readonly logrotate_share="/opt/share/$lr"
#
readonly postmount="/jffs/scripts/post-mount"

# color constants
readonly red="\033[1;31m"
readonly white="\033[1;37m"
readonly green="\033[1;32m"
readonly yellow="\033[1;33m"
readonly blue="\033[1;34m"
readonly std="\033[m"
readonly u_l="\033[4m"

# require Entware
if [ ! -x "/opt/bin/opkg" ]
then
    printf "\n\n$red Entware is required but not installed - exiting! $std\n\n"
    exit 1
fi

# check if skynet is installed
if grep -q skynetloc /jffs/scripts/firewall-start
then
    skynet_installed="yes"
else
    skynet_installed="no"
fi

# get installed scribe version if installed
scribe_installed="$red Not Installed"
[ -e $scribe_script ] && scribe_installed=$( grep "scribe_ver=" $scribe_script | grep -m1 -oE 'v[0-9]{1,2}([.][0-9]{1,2})([_][0-9]{1,2})' )


###################
#### functions ####
###################

alive(){ printf "     $green alive. $std\n"; }

dead(){ printf "     $red dead. $std\n"; }

finis (){ printf "$green done. $std\n"; }

not_installed(){ printf "\n$white $u_l""$1""$std$red NOT$white installed! $std\n"; }

ver_num(){ echo "$1" | sed 's/v//; s/_/./' | awk -F. '{ printf("%d%02d%02d\n", $1, $2, $3); }'; }

enter_to(){ printf "\n\n$white Press [Enter] to $1 $std";read -r;echo; }

dlt(){ [ -d "$1" ] && rm -rf "$1" || rm -f "$1"; }

logo(){
    clear
    printf "                            _             \n"
    printf "                         _ ( )            \n"
    printf "       ___    ___  _ __ (_)| |_      __   \n"
    printf "     /',__) /'___)( '__)| || '_\`\\  /'__\`\\ \n"
    printf "     \\__, \\( (___ | |   | || |_) )(  ___/ \n"
    printf "     (____/\`\\____)(_)   (_)(_,__/'\`\\____) \n"
    printf "                                          \n"
    printf "     %-10s       Coded by cynicastic \n" "$scribe_ver"
}

getzip(){
    if [ "$got_zip" = "no" ]
    then
        dlt "$scribe_dir"
        curl -fL https://github.com/$scribe_author/$scribe_name/archive/$scribe_branch.zip -o $TMP/$scribe_name.zip
        unzip $TMP/$scribe_name.zip -d $TMP
        opkg update
        got_zip="yes"
    fi
}

force_install(){
    printf "\n$white $u_l""$1""$std$white already installed!\n"
    [ "$1" != "$scribe_name" ] && printf "$yellow Forcing installation may overwrite modified configuration files!\n"
    printf "$white Do you want to force re-installation of $1 [y|n]? $std"
    read -r reinstall
    case "$reinstall" in
        [yY][eE][sS]|[yY])
            true
            ;;
        *)
            false
            ;;
    esac
}

sng_syntax(){ if syslog-ng -s;then printf "\n$white syslog-ng syntax check$green okay! $std\n\n";fi }


install(){

###############################
#### install sub-functions ####
###############################

# determine syslog-ng conf file version
    sng_conf_ver(){ grep '@version:' $syslogng_conf | awk '{ printf( $2 ); }' | awk -F. '{ printf ("%d%03d", $1, $2); }'; }

# for pre-3.19 conf file, move syslog-ng.conf @include line to start of file or everything will be written to messages
    sng_conf_fix(){
        printf "$blue moving @include line in $syslogng_conf file$white ..."
        sed -i '/# put any customization/d; /syslog-ng.d/d' $syslogng_conf
        sed -i '3 i # put any customization files in this directory\n@include \"/opt/etc/syslog-ng.d/\" # moved by scribe\n' $syslogng_conf
    }

# configure Skynet to use $skynetlog
    skynet_cfg(){
        if [ "$skynet_installed" = "yes" ]
        then
            mv $syslogng_share/examples/ $syslogng_d/skynet 
            printf "$blue setting skynet log file location$white ..."
            skynetlog=$( grep 'file("' $syslogng_d/skynet | awk -F\" '{ printf ( $2 ); }'; )
            sh /jffs/scripts/firewall settings syslog "$skynetlog" > /dev/null 2>&1
        else
            printf "$red Skynet NOT installed$white ..."
        fi
    }

# setup example files in /usr/share
    setup_exp(){
        [ "$1" = "$sng" ] && d_dir="$syslogng_d" && share="$syslogng_share"
        [ "$1" = "$lr"  ] && d_dir="$logrotate_d" && share="$logrotate_share"
        cp -pu "$scribe_dir"/"$1".d/* $d_dir/
        [ ! -d $share ] && mkdir $share
        [ ! -d $share/examples ] && mkdir $share/examples
        cp -pu "$scribe_dir"/"$1".share/* $share/examples/
    }

# setup syslog-ng
    setup_sng(){
        printf "$white setting up syslog-ng ..."
        cp -pf "$scribe_dir/syslog-ng.conf-small" /opt/etc
        [ "$(sng_conf_ver)" -lt "3019" ] && sng_conf_fix # fix pre-3.19 syslog-ng.conf file
    # add source script to kill syslogd 
        cp -pu "$scribe_dir"/init.d/rc.func.syslog-ng $init_d/
        chmod u=rw,go=r $init_d/rc.func.syslog-ng
        sed -i '/rc.func.syslog-ng/d; \~/opt/etc/init.d/rc.func~i . /opt/etc/init.d/rc.func.syslog-ng # added by scribe\n' $S01sng_loc
    # edit skynet config
        skynet_cfg
        finis
    }

# setup logrotate
    setup_lr(){
    # assumes: 1) since entware is required / installed, post-mount exists and is properly executable
    #          2) if this is called, it is either new intsall or forced, so remove any existing first
        printf "$blue adding logrotate cron job$white ..."
        sed -i '/cru a logrotate/d' $postmount
        [ -n "$( cru l | grep $lr )" ] && cru d $lr
        echo 'cru a logrotate "5 0 * * * /opt/sbin/logrotate /opt/etc/logrotate.conf" # added by scribe' >> $postmount
        cru a $lr "5 0 * * * /opt/sbin/logrotate /opt/etc/logrotate.conf"
        finis
    }

##############################
#### install main routine ####
##############################

    force=""
    [ "X$2" = "XFORCE" ] && force="--force-reinstall"

    printf "$white setting up $1 ..."
    opkg install $force "$1" 
    setup_exp "$1"
    [ "$1" = "$sng" ] && setup_sng
    [ "$1" = "$lr"  ] && setup_lr
}


no_skynet(){
    printf "\nSkynet is$red NOT$std installed on this system!\n"
    printf "If Skynet is installed at a later date, re-run this\n"
    printf "script and force installation of syslog-ng to log the\n"
    printf "iptables messages used by Skynet to their own logfile.\n"
    enter_to continue
}

uninstall(){
    [ -n "$( pidof $sng )" ] && $S01sng_loc stop
    if [ -e $syslogngloc ]
    then
        dlt $S01sng_loc
        dlt $init_d/rc.func.syslog-ng
        dlt /tmp/syslog.log
        dlt /jffs/syslog.log
        dlt /jffs/syslog.log-1
        opkg remove "$sng"
        dlt $syslogng_d
        dlt $syslogng_share
        dlt $syslogng_conf
        dlt /tmp/syslog.log
        [ "$skynet_installed" = "yes" ] && sh /jffs/scripts/firewall settings syslog /tmp/syslog.log > /dev/null 2>&1
    else
        not_installed "$sng"
    fi

    if [ -e $logrotateloc ]
    then
        sed -i '/cru a logrotate/d' $postmount
        [ -n "$( cru l | grep $lr )" ] && cru d $lr
        opkg remove "$lr"
        dlt $logrotate_d
        dlt $logrotate_share
        dlt $logrotate_conf
    else
        not_installed "$lr"
    fi

    dlt /opt/bin/$scribe_name
    dlt $scribe_script

    printf "\n$white $sng, $lr, and $scribe_name have been removed from the system.\n"
    printf " The router will now reboot to ensure the default syslogd is properly started.\n"
    enter_to "reboot"
    service reboot; exit 0
}
	
check_sng_run(){
	printf "\n$white Checking syslog-ng daemon... "
    if [ -z "$( pidof $sng )" ]
	then
		dead
        return 1
	else
		alive
	fi
}

check_lr_run(){
	printf "\n$white Checking logrotate cron job... "
    if cru l | grep -q $lr
	then
		alive
	else
		dead
        return 1
	fi
}

menu_update(){
    curl -fsLN --retry 3 "$scribe_repo" | grep -qF "scribe_ver=" || { printf "\n$red ERROR - unable to contact remote server - stopping update!$std\n\n"; return 1; }
    scribe_remote=$( curl -fsL --retry 3 "$scribe_repo" | grep "scribe_ver=" | grep -m1 -oE 'v[0-9]{1,2}([.][0-9]{1,2})([_][0-9]{1,2})' )
    remote_ver=$( ver_num "$scribe_remote" )
    if [ "$installed_ver" -lt "$remote_ver" ]
    then
        curl -fL --retry 3 "$scribe_repo" -o $scribe_script
    else
        printf "\n$white Installed version =$yellow %s$white, Remote version =$yellow %s" "$scribe_installed" "$scribe_remote"
        printf "\n$white Do you wish to force update [y|n]? $std"
        read -r forceit
        case "$forceit" in
            [yY][eE][sS]|[yY])
                curl -fL --retry 3 "$scribe_repo" -o $scribe_script && printf "\n$white $scribe_name successfully updated.$std\n"
                chmod 0755 $scribe_script
                [ ! -f "/opt/bin/$scribe_name" ] && ln -s $scribe_script /opt/bin
                ;;
            *)
                printf "\n$white $scribe_name not updated!$std\n"
        esac
    fi
}

setup_scribe(){
    printf "$white setting up scribe ..."
    cp -pf "$scribe_dir"/"$scribe_name" "$scribe_script"
    chmod 0755 $scribe_script
    [ ! -f "/opt/bin/$scribe_name" ] && ln -s $scribe_script /opt/bin
    finis
}

gather_debug(){
    scribe_debug_name=$scribe_name"_debug.log"
    scribe_debug=$TMP/$scribe_debug_name
    printf "\n$white gathering debugging information ..."
    printf "### Scribe Version: %s\n" $scribe_ver > $scribe_debug
    [ -z "$(nvram get odmpid)" ] && model="$(nvram get productid)" || model="$(nvram get odmpid)"
    printf "### Router: %s (%s)\n" "$model" $(uname -m) >> $scribe_debug
    printf "### Firmware Version: %s %s\n" "$(uname -o)" "$(nvram get buildno)" >> $scribe_debug
    printf "\n### check running processes:\n" >> $scribe_debug
    ps | grep "syslog" >> $scribe_debug
    printf "\n### check crontab:\n" >> $scribe_debug
    cru l | grep $lr >> $scribe_debug
    printf "\n### directory check:\n" >> $scribe_debug
    ls -ld /tmp/syslog* >> $scribe_debug
    ls -ld /jffs/syslog* >> $scribe_debug
    if skynet_installed="yes"
    then
        printf "\n### Skynet log locations:\n" >> $scribe_debug
        skynetloc="$(grep -ow "skynetloc=.* # Skynet" /jffs/scripts/firewall-start 2>/dev/null | grep -vE "^#" | awk '{print $1}' | cut -c 11-)"
        skynetcfg="${skynetloc}/skynet.cfg"
        grep "syslog" "$skynetcfg" >> $scribe_debug
    fi
    # add additional output here, keep syslog-ng config at bottom
    # printf "\n### \n" >> $scribe_debug

    printf "\n### syslog-ng syntax check:\n" >> $scribe_debug
    if syslog-ng -s > /dev/null 2>&1
    then
        printf "syslog-ng syntax check okay!\n" >> $scribe_debug
        printf "\n### syslog-ng config:\n" >> $scribe_debug
	    $syslogngloc --preprocess-into=$sngconf_merged > /dev/null 2>&1
        cat $sngconf_merged >> $scribe_debug

    else
        syslog-ng -s >> $scribe_debug 2>&1
        printf "**** SYSLOG-NG SYNTAX CHECK FAILED! SEE ABOVE ****\n" >> $scribe_debug
    fi

    printf "\n### end of output ###\n" >> $scribe_debug
    printf " taring the output ..."
    tar -zcvf $scribe_debug.tar.gz -C $TMP $scribe_debug_name > /dev/null 2>&1
    finis

    printf " Debug output stored in %s, please review this file\n" $scribe_debug
    printf " to ensure you understand what information is being disclosed.\n\n"
    printf " Tarball of debug output is %s.tar.gz, \n" $scribe_debug
}

scribe_menu(){
	printf "\n$yellow menu not yet implemented $std\n\n"
}


##############
#### MAIN ####
##############

logo

installed_ver=$( ver_num "$scribe_installed" )

# save a spot for going to the menu (v.2 feature)
# if [ "X$action" = "X" ]
# then
# 	scribe_menu
# fi

case $action in

# install syslog-ng, logrotate, & scribe script
	install)
        getzip

        if [ ! -e $syslogngloc ]
		then
			install "$sng"
		elif force_install "$sng"
        then
            $S01sng_loc stop
            install "$sng" "FORCE"
        fi
        $S01sng_loc start

        if [ ! -e $logrotateloc ]
        then
            install "$lr"
        elif force_install "$lr"
        then
            install "$lr" "FORCE"
        fi

        if [ ! -e "/opt/bin/$scribe_name" ]
        then
            setup_scribe
        elif force_install "$scribe_name"
        then
            setup_scribe
        fi

        dlt $TMP/$scribe_name.zip
        [ "$skynet_installed" = "no" ] && no_skynet
        ;;

# uninstall scribe
	uninstall | remove)
        printf "\n\n$white"
        printf "                *********************\n"
        printf "                ***$red W*A*R*N*I*N*G$white ***\n"
        printf "                *********************\n\n"
        printf "    This will remove the $yellow $sng $white and $yellow $lr $white packages!!\n"
        printf "    Ensure you have backed up any configuration files you wish\n"
        printf "    to keep.  All configuration files in $yellow $syslogng_d $white \n"
        printf "    and $yellow $logrotate_d $white will be deleted!\n\n"
        printf "                *********************\n"
        printf "                ***$red W*A*R*N*I*N*G$white ***\n"
        printf "                *********************\n\n"
        printf "Are you SURE you want to uninstall $scribe_name (type YES to uninstall)? $std"
        read -r wipeit
        case "$wipeit" in
            YES)
                uninstall
                ;;
            *)
                printf "\n\n$white *** UNINSTALL ABORTED! ***$std\n\n"
                ;;
        esac
        ;;

# update scribe
    update)
        menu_update
        ;;

# show total combined config
	show-config | config)
		if [ -e $syslogngloc ]
		then
			$syslogngloc --preprocess-into=$sngconf_merged && less $sngconf_merged
            sng_syntax
		else
            not_installed $sng
		fi
		;;

# check syntax
    check-syntax | syntax)
        sng_syntax
        ;;

# verify syslog-ng is running and logrotate is listed in 'cru l'
    status)
		check_sng_run
		check_lr_run
        printf "\n$white scribe installed version:$green $scribe_installed $std\n\n"
        # printf "\n$white scribe GitHub version:$green $scribe_github $std\n\n"
		;;

# restart (or start if not running) syslog-ng
	restart)
		if check_sng_run
		then
			printf "$yellow Restarting syslog-ng ... $std\n"
			$S01sng_loc restart
		else
			printf "$white syslog-ng$red NOT$white running! $yellow Starting syslog-ng ... $std\n"
			$S01sng_loc start
		fi
		;;

# generate debug tarball
    debug)
        gather_debug
        ;;
        
# unrecognized command
    *)
	 	printf "\n$white Usage: $0 ( install | uninstall | update | show-config | check-syntax | status | restart )$std\n\n"
		exit 1
		;;
esac

printf "\n\n"
#eof
