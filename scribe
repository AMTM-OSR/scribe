#!/bin/sh
#tof

#                        _            
#                     _ ( )           
#   ___    ___  _ __ (_)| |_      __  
# /',__) /'___)( '__)| || '_`\  /'__`\
# \__, \( (___ | |   | || |_) )(  ___/
# (____/`\____)(_)   (_)(_,__/'`\____)
# syslog-ng and logrotate installer for Asuswrt-Merlin
#
# Coded by cynicastic
#
# Original interest in syslog-ng on Asuswrt-Merlin inspired by tomsk & kvic
# Good ideas and code borrowed heavily from Adamm, Jack Yaz, thelonelycoder, & Xentrx
#
# Bad ideas and code are entirely mine
#
# install command:
#   curl --retry 3 "https://raw.githubusercontent.com/cynicastic/scribe/master/scribe" -o "/jffs/scripts/scribe" && chmod 0755 /jffs/scripts/scribe && /jffs/scripts/scribe install
#
# shellcheck disable=SC2009
# SC2009 = Consider uing pgrep ~ Note that pgrep doesn't exist in asuswrt
# shellcheck disable=SC2059
# SC2059 = Don't use variables in the printf format string. Use printf "..%s.." "$foo" ~ I (try to) only embed the ansi color escapes in printf strings


# parse parameters
action="$1"
[ "X$action" = "X" ] && action="menu"
got_zip=false
[ -n "$2" ] && [ "$2" = "gotzip" ] && got_zip=true && shift
banner=true
[ "$SCRIBE_LOGO" = "nologo" ] && banner=false
[ -n "$2" ] && [ "$2" = "nologo" ] && banner=false && shift
readonly banner
[ -z "$TMP" ] && TMP=/opt/tmp

# scribe constants
readonly scribe_name="scribe"
readonly scribe_branch="gamma"
scribe_ver="v2.0.0" # version number for amtm compatibility, but keep vX.Y_Z otherwise because I'm stubborn
readonly scribe_ver="$( echo $scribe_ver | sed 's/\./_/2' )"
readonly scribe_long="$scribe_ver ($scribe_branch)"
readonly scribe_author="cynicastic"
readonly scribe_repo="https://raw.githubusercontent.com/$scribe_author/$scribe_name/$scribe_branch/$scribe_name"
readonly unzip_dir="$TMP/$scribe_name-$scribe_branch"
readonly scribe_tmp="$TMP/scribe.tmp"
readonly script_d="/jffs/scripts"
readonly scribe_script="$script_d/$scribe_name"

# router details
readonly merlin="ASUSWRT-Merlin"
readonly fwreqd="380.68"
readonly fwname="$( uname -o )"
readonly fwvers="$( nvram get buildno )"
model="$( nvram get odmpid )"
[ -z "$model" ] && model="$( nvram get productid )"
readonly model
readonly arch="$( uname -m )"

# miscellaneous constants
readonly sng="syslog-ng"
readonly sng_reqd="3.19.0"
readonly lr="logrotate"
readonly init_d="/opt/etc/init.d"
readonly S01sng_init="$init_d/S01$sng"
readonly rcfunc_sng="rc.func.$sng"
readonly rcfunc_loc="$init_d/$rcfunc_sng"
readonly syslog_log="/tmp/syslog.log"
readonly sng_loc="/opt/sbin/$sng"
readonly lr_loc="/opt/sbin/$lr"
readonly sng_conf="/opt/etc/$sng.conf"
readonly sngconf_merged="$TMP/syslog-ng-complete.conf"
readonly sngconf_error="$TMP/syslog-ng-error.conf"
readonly lr_conf="/opt/etc/$lr.conf"
readonly lr_daily="/opt/tmp/logrotate.daily"
readonly sngd_d="/opt/etc/$sng.d"
readonly lrd_d="/opt/etc/$lr.d"
readonly sng_share="/opt/share/$sng"
readonly lr_share="/opt/share/$lr"
readonly srvc_event="$script_d/service-event"
readonly postmount="$script_d/post-mount"
readonly divers="/opt/bin/diversion"
readonly div_req="4.1"

# color constants
readonly red="\033[1;31m"
readonly green="\033[1;32m"
readonly yellow="\033[1;33m"
readonly blue="\033[1;34m"
readonly magenta="\033[1;35m"
readonly cyan="\033[1;36m"
readonly white="\033[1;37m"
readonly std="\033[m"

# check if already installed by looking for link in /opt/bin
is_inst=false
[ -e "/opt/bin/$scribe_name" ] && is_inst=true

# test if syslog-ng is installed
sng_inst=false
[ -e "$sng_loc" ] && sng_inst=true

# check if Skynet is installed
if grep -q "skynetloc" $script_d/firewall-start; then skynet_inst=true; else skynet_inst=false; fi

#### functions ####

alive(){ printf "$green alive. $std\n"; }

dead(){ printf "$red dead. $std\n"; }

present(){ printf "$green present. $std\n"; }

updated(){ printf "$yellow updated. $std\n"; }

finis (){ printf "$green done. $std\n"; }

not_installed(){ printf "\n$blue %s$red NOT$white installed! $std\n" "$1"; }

enter_to(){ printf "$white Press [Enter] to %s: $std" "$1"; read -r; echo; }

ver_num(){ echo "$1" | sed 's/v//; s/_/./' | awk -F. '{ printf("%d%02d%02d\n", $1, $2, $3); }'; }

md5_file(){ md5sum "$1" | awk '{ printf( $1 ); }'; } # get md5sum of file

dlt(){ rm -rf "$1"; }

# in this case, A && B || C does function as if-then-else because B is by definition true
# shellcheck disable=SC2015
same_same(){ [ "$( md5_file "$1" )" = "$( md5_file "$2" )" ] && true || false; }

update_file(){
    [ -e "$2" ] && mv "$2" "$2-$( date -Iseconds | cut -c 1-19 )"
    cp -pf "$1" "$2"
}

# Check yes or no
yes_no(){
    read -r resp
    case "$resp" in
        [yY][eE][sS]|[yY])
            true
            ;;
        *)
            false
            ;;
    esac
}

logo(){
    if ! $banner; then return; fi
    clear
    printf "$white                            _\n"
    printf "                         _ ( )            \n"
    printf "       ___    ___  _ __ (_)| |_      __   \n"
    printf "     /',__) /'___)( '__)| || '_\`\\  /'__\`\\ \n"
    printf "     \\__, \\( (___ | |   | || |_) )(  ___/ \n"
    printf "     (____/\`\\____)(_)   (_)(_,__/'\`\\____) \n"
    printf "     %s and %s installation $std\n" "$sng" "$lr"
    printf "    $green %-15s $blue Coded by cynicastic $std\n\n" "$scribe_long"
}

get_zip(){
    if ! $got_zip
    then
        dlt $unzip_dir
        dlt $TMP/$scribe_name.zip
        printf "\n$white fetching %s from GitHub %s branch ...$std\n" "$scribe_name" "$scribe_branch"
        if curl -fL https://github.com/$scribe_author/$scribe_name/archive/$scribe_branch.zip -o $TMP/$scribe_name.zip
        then
            printf "\n$white unzipping %s ...$std\n" "$scribe_name"
            unzip $TMP/$scribe_name.zip -d $TMP
            opkg update
            got_zip=true
        else
            printf "\n$white %s GitHub repository$red is unavailable! $std -- Aborting.\n" "$scribe_name"
            exit 1
        fi
    fi
}

sync_conf(){
    sng_vers="$( $sng --version | grep -m1 $sng | grep -oE '[0-9]{1,2}([_.][0-9]{1,2})' )"
    sng_conf_vers="$( grep -m1 "@version:" $sng_conf | grep -oE '[0-9]{1,2}([_.][0-9]{1,2})' )"
    if [ "$sng_vers" != "$sng_conf_vers" ]
    then
        printf "\n$cyan syncing %s to %s version (%s) ..." "$( basename $sng_conf )" "$sng" "$sng_vers"
        sed -i "s/$sng_conf_vers.*/$sng_vers/" $sng_conf
        finis
    fi
}

copy_rcfunc(){
    printf "$white copying %s to %s ...$std" "$rcfunc_sng" "$init_d"
    cp -pf $unzip_dir/init.d/$rcfunc_sng $init_d/
    chmod 644 $rcfunc_loc
    finis
}

sed_sng(){
    printf "\n$white %34s" "checking $( basename $S01sng_init ) ..."
    if ! grep -q $rcfunc_sng $S01sng_init
    then
        sed -i "\~/opt/etc/init.d/rc.func~i . $rcfunc_loc # added by scribe\n" $S01sng_init
        updated
    else
        present
    fi

    printf "\n$white %34s" "checking $( basename $srvc_event ) ..."
    if [ -f $srvc_event ]
    then
        sed -i "s/$scribe_name kill_logger/$scribe_name kill-logger/g" $srvc_event
        sed -i "s/nologo \"\$2\"/nologo \"\$1\" \"\$2\"/g" $srvc_event
        if ! grep -q $scribe_name $srvc_event
        then
            echo "$scribe_script kill-logger nologo \"\$1\" \"\$2\" & # added by scribe" >> $srvc_event
            updated
        else
            present
        fi
        [ "$( grep -c "#!/bin/sh" $srvc_event )" -ne 1 ] && sed -i "1s~^~#!/bin/sh\n\n~" $srvc_event
    else
        {
            echo "#!/bin/sh"
            echo ""
            echo "$scribe_script kill-logger nologo \"\$1\" \"\$2\" & # added by scribe"
        } > $srvc_event
        printf "$green created. $std\n"
    fi
    [ ! -x $srvc_event ] && chmod 0755 $srvc_event
}

lr_cron(){
    printf "\n$white %34s" "checking $( basename $postmount ) ..."
    if ! grep -q $lr $postmount
    then
        echo "cru a $lr "'"5 0 * * *'" $lr_loc $lr_conf >> $lr_daily "'2>&1" # added by scribe' >> $postmount
        updated
    else
        present
    fi

	printf "\n$white %34s" "checking $lr cron job ..."
    if ! cru l | grep -q $lr
    then
        cru a $lr "5 0 * * * $lr_loc $lr_conf >> $lr_daily 2>&1"
        updated
    else
        present
    fi
}

sng_syntax(){
    printf "\n$white %34s" "$( basename $sng_conf ) syntax check ..."
    if syslog-ng -s >> /dev/null 2>&1; then printf "$green okay! $std\n"; else printf "$red FAILED! $std\n\n"; fi
}

check_sng(){
	printf "\n$white %34s" "checking $sng daemon ..."
    if [ -z "$( pidof $sng )" ]; then dead; false; else alive; true; fi
}

# install default file in /usr/etc/$1.d
setup_ddir(){
    [ "$1" = "$sng" ] && d_dir="$sngd_d"
    [ "$1" = "$lr"  ] && d_dir="$lrd_d"
    
    for dfile in "$unzip_dir/$1.d"/*
    do
        dfbase="$( basename "$dfile" )"
        ddfile="$d_dir/$dfbase"
        { [ ! -e "$ddfile" ] || [ "$2" = "ALL" ]; } && cp -pu "$dfile" "$ddfile"
    done

    chmod 600 $d_dir/*
}

# install example files in /usr/share/$1/examples
setup_exmpls(){
    [ "$1" = "$sng" ] && share="$sng_share" && conf="$sng_conf"
    [ "$1" = "$lr"  ] && share="$lr_share" && conf="$lr_conf"
    opkg="$1.conf-opkg"
    conf_opkg="$conf-opkg"

    [ "$2" != "ALL" ] && printf "\n $white"
    [ ! -d $share ] && mkdir $share
    [ ! -d $share/examples ] && mkdir $share/examples

    for exmpl in "$unzip_dir/$1.share"/*
    do
        exbase="$( basename "$exmpl" )"
        shrfile="$share/examples/$exbase"
        if [ ! -e "$shrfile" ] || [ "$2" = "ALL" ]
        then
            update_file "$exmpl" "$shrfile"
        elif ! same_same "$exmpl" "$shrfile"
        then
            printf "updating %s\n" "$shrfile"
            update_file "$exmpl" "$shrfile"
        fi
    done

    if [ -e $conf_opkg ]
    then
        update_file "$conf_opkg" "$share/examples/$opkg"
        dlt $conf_opkg
    elif [ ! -e "$share/examples/$opkg" ]
    then
        cp -pf $conf "$share/examples/$opkg"
        if [ "$1" = "$sng" ]
        then
            printf "\n$white NOTE: The %s file provided by the Entware %s package sources a very\n" "$( basename $conf )" "$sng"
            printf " complex set of logging functions most users don't need.$magenta A replacement %s has been\n" "$( basename $conf )"
            printf " installed to %s$white that corrects this issue. The %s file provided\n" "$conf" "$( basename $conf )"
            printf " by the Entware package has been moved to $cyan%s$white.\n" "$share/examples/$opkg"
        fi
    fi
    
    chmod 600 $share/examples/*
    printf "$std"
}

force_install(){
    printf "\n$blue %s$white already installed!\n" "$1"
    [ "$1" != "$scribe_name" ] && printf "$yellow Forcing installation$red WILL OVERWRITE$yellow any modified configuration files!\n"
    printf "$white Do you want to force re-installation of %s [y|n]? $std" "$1"
    yes_no
    return $?
}

show_config(){
    if [ -e $sng_loc ]
    then
        dlt $sngconf_merged
        dlt $sngconf_error
        if $sng_loc --preprocess-into=$sngconf_merged 2> $sngconf_error
        then
            less $sngconf_merged
        else 
            less $sngconf_error
        fi
        true
    else
        not_installed $sng
        false
    fi
}

run_logrotate(){
    dlt $lr_daily
    printf "\n$white %34s" "running $lr ..."
    $lr_loc $lr_conf >> $lr_daily 2>&1
    finis
    printf "\n$magenta checking %s log for errors $cyan\n\n" "$lr"
    tail -v $lr_daily
}

get_vers(){
    # only get scribe from github once 
    scribe_md5="$( md5_file "$scribe_script")"
    dlt $scribe_tmp
    curl -fsL --retry 3 "$scribe_repo"  -o "$scribe_tmp"
    [ ! -e "$scribe_tmp" ] && printf "\n\n$white %s GitHub repository is unavailable! -- $red ABORTING! $std\n\n" "$scribe_name" && exit 1
    github_ver="$( grep -m1 "scribe_ver=" "$scribe_tmp" | grep -oE 'v?[0-9]{1,2}([.][0-9]{1,2})([_.][0-9]{1,2})' | sed 's/\./_/2' )"
    github_branch="$( grep -m1 "scribe_branch=" "$scribe_tmp" | awk -F\" '{ printf ( $2 ); }'; )" 
    github_long="$github_ver ($github_branch)"
    github_md5="$( md5_file "$scribe_tmp")"
    new_vers="none"
    if [ "$( ver_num "$github_ver" )" -lt "$( ver_num "$scribe_ver" )" ]; then new_vers="older"
    elif [ "$( ver_num "$github_ver" )" -gt "$( ver_num "$scribe_ver" )" ]; then new_vers="major"
    elif [ "$scribe_md5" != "$github_md5" ]; then new_vers="minor"
    fi
    dlt $scribe_tmp
}

prt_vers(){
    printf "\n$white %34s$green %s \n" "scribe installed version:" "$scribe_long"
    printf "$white %34s$green %s $std\n" "scribe GitHub version:" "$github_long"
    case $new_vers in
        older)
            printf "$red      Local scribe version greater than GitHub version!"
            ;;
        major)
            printf "$yellow %45s" "New scribe version available"
            ;;
        minor)
            printf "$blue %45s" "Minor scribe update available"
            ;;
        none)
            printf "$green %40s" "scribe is up to date!"
            ;;
    esac
    printf "$std\n\n"
}

menu_status(){
    sync_conf
    printf "\n$magenta checking system for necessary %s hooks ...\n" "$scribe_name"
    sed_sng
    lr_cron
    printf "\n$magenta checking %s configuration ...\n" "$sng"
    sng_syntax
    check_sng
    get_vers
    prt_vers
}

sng_ver_chk(){
    sng_vers="$( $sng --version | grep -m1 $sng | grep -oE '[0-9]{1,2}([_.][0-9]{1,2})([_.][0-9]{1,2})' )"
    if [ "$( ver_num "$sng_vers" )" -lt "$( ver_num "$sng_reqd" )" ]
    then
        printf "\n$red %s version %s or higher required!\n" "$sng" "$sng_reqd"
        printf "Please update your Entware packages and run scribe install again.$cyan\n\n"
        opkg remove "$sng"
        printf "$std\n\n"
        exit 1
    fi
}

setup_sng(){
    printf "\n$magenta setting up %s ...\n $std" "$sng"
    copy_rcfunc
    sed_sng

    if [ "$( md5_file "$sng_share/examples/$sng.conf-scribe" )" != "$( md5_file "$sng_conf" )" ]
    then
        printf "\n$white %34s" "updating $( basename $sng_conf ) ..."
        update_file $sng_share/examples/$sng.conf-scribe $sng_conf
        finis
    fi
}

setup_lr(){
    # assumes since entware is required / installed, post-mount exists and is properly executable
    printf "\n$magenta setting up %s ..." "$lr"
    lr_cron
}

install(){
    force=""
    [ "X$2" = "XFORCE" ] && force="--force-reinstall"
    printf "\n$cyan"
    opkg install $force "$1" 
    [ "$1" = "$sng" ] && sng_ver_chk
    setup_ddir "$1" "ALL"
    setup_exmpls "$1" "ALL"
    [ "$1" = "$sng" ] && setup_sng
    [ "$1" = "$lr"  ] && setup_lr
}

sky_filter(){
    printf " %s Skynet filter ..." "$sng"
    cp -pu $sng_share/examples/skynet $sngd_d 
    printf "$blue setting Skynet log file location$white ..."
    skynetlog="$( grep -m1 'file("' $sngd_d/skynet | awk -F\" '{ printf ( $2 ); }'; )"
    sh $script_d/firewall settings syslog "$skynetlog" > /dev/null 2>&1
}

setup_scribe(){
    printf "\n$white setting up %s ..." "$scribe_name"
    cp -pf $unzip_dir/$scribe_name $scribe_script
    chmod 0755 $scribe_script
    [ ! -e "/opt/bin/$scribe_name" ] && ln -s $scribe_script /opt/bin
    if $skynet_inst
    then
        dlt $sngd_d/firewall
        if [ ! -e "$sngd_d/skynet" ] || [ "$1" = "ALL" ]
        then
            printf "$white installing"
            sky_filter
        elif ! same_same "$sng_share/examples/skynet" "$sngd_d/skynet"
        then
            printf "$white updating"
            sky_filter
        fi
    else
        dlt $sngd_d/skynet
        if [ ! -e "$sngd_d/firewall" ] || [ "$1" = "ALL" ]
        then 
            printf "$white installing %s firewall filter ..." "$sng"
            cp -pu $sng_share/examples/firewall $sngd_d 
        elif ! same_same "$sng_share/examples/firewall" "$sngd_d/firewall"
        then
            printf "$white updating %s firewall filter ..." "$sng"
            cp -pu $sng_share/examples/firewall $sngd_d 
        fi
    fi
    finis
}

pre_install(){
    # check for required components
    okay=true

    # require Entware
    if [ ! -x "/opt/bin/opkg" ] || [ "$fwname" != "$merlin" ] || [ "$( ver_num "$fwvers" )" -lt "$( ver_num "$fwreqd" )" ]
    then
        printf "\n\n$red %s version %s or later with Entware is required! $std\n" "$merlin" "$fwreqd"
        okay=false
    fi

    # check if diversion is installed and version number
    if [ -x "$divers" ]
    then
        printf "\n\n$white Diversion detected, checking version ..."
        div_ver="$( grep -m1 "VERSION" $divers | grep -oE '[0-9]{1,2}([.][0-9]{1,2})' )"
        printf " version %s detected ..." "$div_ver"
        if [ "$( ver_num "$div_ver" )" -lt "$( ver_num "$div_req" )" ]
        then
            printf "$red update required!\n"
            printf " Diversion %s or later is required! $std\n" "$div_req"
            okay=false
        else
            printf "$green okay! $std\n"
        fi
    fi

    # check if Skynet is installed
    if ! $skynet_inst 
    then
        printf "$white\n\n Skynet is$red NOT$white installed on this system!\n\n"
        printf " If you plan to install Skynet, it is recommended\n"
        printf " to stop %s installation now and install Skynet\n" "$scribe_name"
        printf " using amtm (https://github.com/decoderman/amtm).\n\n"
        printf " If Skynet is installed after %s, run \"%s install\"\n" "$scribe_name" "$scribe_name"
        printf " and force installation to configure %s and Skynet\n" "$scribe_name"
        printf " to work together.\n\n"
        if $okay
        then
            printf " Do you want to continue installation of %s [y|n]? $std" "$scribe_name"
            if ! yes_no
            then
                okay=false
            fi
        fi
    fi

    # exit if requiements not met
    if ! $okay
    then
        printf "\n\n$magenta exiting %s installation. $std\n\n" "$scribe_name"
        dlt $scribe_script
        exit 1
    fi
}

menu_install(){
        if [ ! -e $sng_loc ]
        then
            install "$sng"
        elif force_install "$sng"
        then
            $S01sng_init stop
            install "$sng" "FORCE"
        fi
        echo
        $S01sng_init start

        if [ ! -e $lr_loc ]
        then
            install "$lr"
        elif force_install "$lr"
        then
            install "$lr" "FORCE"
        fi
        run_logrotate

        if ! $is_inst
        then
            setup_scribe "ALL"
        elif force_install "$scribe_name script"
        then
            setup_scribe "ALL"
        fi

        printf "\n$white %s setup complete!  " "$scribe_name"
        enter_to "continue"
}

menu_restart(){
    if check_sng
    then
        printf "$yellow Restarting %s... $std\n" "$sng"
        $S01sng_init restart
    else
        printf "$white %s$red NOT$white running! $yellow Starting %s ... $std\n" "$sng"
        $S01sng_init start
    fi
}

uninstall(){
    printf "\n\n"
    if [ -e $sng_loc ]
    then
        [ -n "$( pidof $sng )" ] && printf "$white stopping %s ..." "$sng" && $S01sng_init stop
        dlt $syslog_log
        dlt $syslog_log-1
        dlt /jffs/syslog.log
        dlt /jffs/syslog.log-1
        mv /opt/var/log/messages $syslog_log
        printf "$white starting system klogd and syslogd ..."
        service start_logger
        sed -i "/$scribe_name/d" $srvc_event
        dlt $S01sng_init
        dlt $rcfunc_loc
        printf "\n$cyan"
        opkg remove "$sng"
        if [ -e $sng_conf ]
        then
            if same_same "$sng_conf" "$sng_share/examples/$sng.conf-scribe"
            then
                dlt $sng_conf
            else
                printf "\n$blue %s$yellow does not match$blue %s$yellow,\n" "$sng_conf" "$sng_share/examples/$sng.conf-scribe"
                printf " not deleting$blue %s$yellow ..." "$sng_conf"
            fi
        fi
        # need to look for non-scribe & changed filters here or just backup the directories
        dlt $sngd_d
        dlt $sng_share

        if $skynet_inst
        then
            printf "$white restoring Skynet logging to %s ..." "$syslog_log"
            sh $script_d/firewall settings syslog $syslog_log > /dev/null 2>&1
        fi
    else
        not_installed "$sng"
    fi

    if [ -e $lr_loc ]
    then
        sed -i "/cru a $lr/d" $postmount
        if cru l | grep -q $lr; then cru d $lr; fi
        printf "\n$cyan"
        opkg remove "$lr"
        if [ -e $lr_conf ]
        then
            if same_same "$lr_conf" "$lr_share/examples/$lr.conf-opkg"
            then
                dlt $lr_conf
            else
                printf "\n$blue %s$yellow does not match$blue %s$yellow,\n" "$lr_conf" "$lr_share/examples/$lr.conf-opkg"
                printf " not deleting$blue %s$yellow ..." "$lr_conf"
            fi
        fi
        # need to look for non-scribe & changed filters here or just backup the directories
        dlt $lrd_d
        dlt $lr_share
        dlt $lr_daily
    else
        not_installed "$lr"
    fi

    dlt $TMP/$scribe_name.zip
    dlt $TMP/$scribe_name-$scribe_branch
    dlt /opt/bin/$scribe_name
    dlt $scribe_script

    printf "\n$white %s, %s, and %s have been removed from the system.\n" "$sng" "$lr" "$scribe_name"
    printf " It is recommended to reboot the router at this time.  If you do not\n"
    printf " wish to reboot the router, press ctrl-c now to exit.\n\n\n"
    enter_to "reboot"
    service reboot; exit 0
}

menu_uninstall(){
    printf "\n\n$white"
    printf "                *********************\n"
    printf "                ***$red W*A*R*N*I*N*G$white ***\n"
    printf "                *********************\n\n"
    printf "    This will remove the $yellow $sng $white and $yellow $lr $white packages!!\n"
    printf "    Ensure you have backed up any configuration files you wish\n"
    printf "    to keep.  All configuration files in $yellow $sngd_d $white \n"
    printf "    and $yellow $lrd_d $white will be deleted!\n\n"
    printf "                *********************\n"
    printf "                ***$red W*A*R*N*I*N*G$white ***\n"
    printf "                *********************\n\n"
    printf "Are you SURE you want to uninstall $scribe_name (type YES to uninstall)? $std"
    read -r wipeit
    case "$wipeit" in
        YES)
            uninstall
            ;;
        *)
            printf "\n\n$white *** UNINSTALL ABORTED! ***$std\n\n"
            ;;
    esac
}

menu_filters(){
    printf "\n$white    Do you want to update %s and %s filter files?\n" "$sng" "$lr"
    printf "$cyan    * adds any new files to /opt/share/*/examples and updates files\n"
    printf "    that have changed\n"
    printf "    * adds any new files to /opt/etc/*.d directories but does not\n"
    printf "    modify any existing files\n"
    printf "$white        Update filter files? [y|n] $std"
    if yes_no
    then
        get_zip
        for pckg in $sng $lr
        do
            setup_ddir "$pckg" "NEW"
            setup_exmpls "$pckg" "NEWER"
        done
        printf "\n$white %s and %s example files updated!$std\n" "$sng" "$lr"
    else
        printf "\n$white %s and %s example files$red not$white updated!$std\n" "$sng" "$lr"
    fi
}

menu_update(){
    if [ "$new_vers" = "major" ] || [ "$new_vers" = "minor" ]
    then
        [ "$new_vers" = "major" ] && printf "\n$green    New version" || printf "$cyan    Minor update"
        printf "$white available!\n"
        printf "    Do you wish to upgrade? [y|n] $std"
    else
        printf "\n$white    No new version available. (GitHub version"
        [ "$new_vers" = "none" ] && printf " equal to " || printf "$red LESS THAN $white"
        printf "local version)\n"
        printf "    Do you wish to force re-installation of scribe script? [y|n] $std"
    fi
    if yes_no
    then
        get_zip
        setup_scribe "NEWER"
        copy_rcfunc
        printf "\n$white %s updated!$std\n" "$scribe_name"
        run_scribe=true
    else
        printf "\n$white %s$red not$white updated!$std\n" "$scribe_name"
    fi

    if $run_scribe
    then
        sh "$scribe_script" filters gotzip nologo
        sh "$scribe_script" status nologo
    else
        menu_filters
        menu_status
    fi
}

gather_debug(){
    scribe_debug_name=$scribe_name"_debug.log"
    scribe_debug=$TMP/$scribe_debug_name
    dlt $scribe_debug
    printf "\n$white gathering debugging information ..."
    get_vers

    # everything between { } goes to $scribe_debug
    {
        printf "### Scribe Version: %s\n" "$scribe_long"
        printf "###  Local Scribe md5: %s\n" "$scribe_md5"
        printf "### GitHub Version: %s\n" "$github_long"
        printf "### GitHub Scribe md5: %s\n" "$github_md5"
        printf "### Router: %s (%s)\n" "$model" "$arch"
        printf "### Firmware Version: %s %s\n" "$fwname" "$fwvers"
        printf "\n### check running log processes:\n"
        ps | grep "log"
        printf "\n### check crontab:\n"
        cru l | grep $lr
        printf "\n### directory check:\n"
        ls -ld /tmp/syslog*
        ls -ld /jffs/syslog*
        printf "\n### top output:\n"
        top -b -n1 | head
        printf "\n### *log references in top:\n"
        top -b -n1 | grep log
        printf "\n### init.d directory:\n"
        ls -l /opt/etc/init.d
        printf "\n### contents of S01syslog-ng\n"
        cat /opt/etc/init.d/S01syslog-ng
        printf "\n### /opt/var/log directory:\n"
        ls -l /opt/var/log
        printf "\n### installed packages:\n"
        opkg list-installed
    } >> $scribe_debug

    printf "\n### syslog-ng syntax check:\n" >> $scribe_debug
    dlt $sngconf_merged
    dlt $sngconf_error
    $sng_loc --preprocess-into=$sngconf_merged 2> $sngconf_error
    cat $sngconf_merged >> $scribe_debug
    if [ -s $sngconf_error ]
    then
        {
            printf "#### SYSLOG-NG SYNTAX CHECK FAILED! SEE BELOW ####\n"
            cat $sngconf_error
            printf "###### END SYSLOG-NG SYNTAX FAILURE OUTPUT ######\n"
        } >> $scribe_debug
    else
        printf "#### syslog-ng syntax check okay! ####\n" >> $scribe_debug
    fi

    if $skynet_inst
    then
        skynetloc="$( grep -ow "skynetloc=.* # Skynet" $script_d/firewall-start 2>/dev/null | grep -vE "^#" | awk '{print $1}' | cut -c 11- )"
        skynetcfg="${skynetloc}/skynet.cfg"
        {
            printf "\n### Skynet log locations:\n"
            grep "syslog" "$skynetcfg"
        } >> $scribe_debug
    else
        printf "\n### Skynet not installed.\n"
    fi

    printf "\n### end of output ###\n" >> $scribe_debug
    redact="$( echo "$USER" | awk  '{ string=substr($0, 1, 8); print string; }' )"
    sed -i "s/$redact/redacted/g" "$scribe_debug"
    printf " taring the output ..."
    tar -zcvf $scribe_debug.tar.gz -C $TMP $scribe_debug_name > /dev/null 2>&1
    finis

    printf "\n$std Debug output stored in $cyan%s$std, please review this file\n" "$scribe_debug"
    printf " to ensure you understand what information is being disclosed.\n\n"
    printf " Tarball of debug output is $cyan%s.tar.gz $std\n" "$scribe_debug"
}

main_menu(){
    header="=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=$std\n\n"
    printf "$white $header"
    printf "     s.    Show scribe status\n"
    printf "     c.    Show combined syslog-ng config\n"
    printf "     rs.   Restart syslog-ng\n"
    printf "     lr.   Run logrotate now\n\n"
    printf "     u.    Update scribe\n"
    printf "     uf.   Update filters\n"
    printf "     d.    Generate debug info\n\n"
    printf "     e.    Exit scribe\n\n"
    printf "     is.   Install scribe\n"
    printf "     zs.   Remove scribe\n\n"
    printf "$white $header"
    printf "$magenta Please select an option: $std"
}

scribe_menu(){
	while true
    do
        pause=true
        run_scribe=false
        logo
        if $sng_inst; then sync_conf; fi
        main_menu
        read -r choice
        case "$choice" in
            s)
                menu_status
                ;;
            c)
                show_config
                pause=false
                ;;
            rs)
                menu_restart
                menu_status
                ;;
            lr)
                run_logrotate
                ;;
            u)
                get_vers
                print_vers
                menu_update
                ;;
            uf)
                menu_filters
                ;;
            d)
                gather_debug
                printf "\n$white Would you like to review the debug data (opens in less)? [y|n] $std"
                if yes_no; then pause=false; less "$scribe_debug"; fi
                ;;
            e)
                printf "\n$white Thanks for using scribe! $std\n\n\n"
                exit 0
                ;;
            is)
                if ! $is_inst; then pre_install; fi
                get_zip
                menu_install
                run_scribe=true
                ;;
            zs)
                menu_uninstall
                ;;
            *)
                printf "\n$red Unrecognized command \"%s\". " "$choice"
                ;;
        esac
        if $pause; then enter_to "continue"; fi
        if $run_scribe; then sh "$scribe_script"; exit 0; fi
    done
}


##############
#### MAIN ####
##############

if [ "$action" = "menu" ]; then scribe_menu; else logo; fi

case $action in

# (re-)install syslog-ng, logrotate, & scribe script
    install)
        if ! $is_inst; then pre_install; fi
        get_zip
        menu_install
        sh "$scribe_script" status nologo
        ;;

# uninstall scribe
    uninstall | remove)
        menu_uninstall
        ;;

# update scribe
    update)
        run_scribe=false
        get_vers
        prt_vers
        menu_update
        ;;

# update syslog-ng and logrotate filters
    update-filters | filters)
        menu_filters
        ;;

# show total combined config
    show-config | config)
        if show_config; then sng_syntax; fi
        ;;

# verify syslog-ng is running and logrotate is listed in 'cru l'
    status)
        menu_status
        ;;

# restart (or start if not running) syslog-ng
    restart)
        menu_restart
        menu_status
        ;;

# generate debug tarball
    debug)
        gather_debug
        ;;

# kill syslogd & klogd - only available via cli
    kill-logger)
        [ "$2" = "stop" ] || { [ "$3" != "logger" ] && [ "$3" != "time" ]; } && exit 0
        # load kill_logger() function
        # keep shellcheck from barfing on sourcing $rcfunc_loc
        # shellcheck disable=SC1091
        # shellcheck source=/opt/etc/init.d/rc.func.syslog-ng
        . $rcfunc_loc
        count=120
        found=false
        while [ $count -gt 0 ]
        do
            sleep 1 # give them a moment to start up; drop count to 6 if found in case lag between starting
            if [ -n "$( pidof klogd )" ] || [ -n "$( pidof syslogd )" ]
            then
                kill_logger
                found=true
                count=6
            fi
            count=$(( count - 1 ))
        done
        if ! $found; then logger -t "$scribe_name" "kill-logger FAILED! check if klogd or syslogd running."; fi
        ;;
        
# unrecognized command
    *)
        printf "\n$white Usage: $0 ( install | uninstall | update | [update-]filters | [show-]config | status | restart | debug )$std\n\n"
        exit 1
        ;;
esac

printf "\n"
#eof
