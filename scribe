#!/bin/sh
#tof

#                        _            
#                     _ ( )           
#   ___    ___  _ __ (_)| |_      __  
# /',__) /'___)( '__)| || '_`\  /'__`\
# \__, \( (___ | |   | || |_) )(  ___/
# (____/`\____)(_)   (_)(_,__/'`\____)
#                                    
# Coded by cynicastic
#
# Version 1.x series is cli-driven
# Version 2.x series will be menu-driven (cli will still work)
#
# Original interest in syslog-ng on Asuswrt-Merlin inspired by tomsk & kvic
# Good ideas and code borrowed heavily from Adamm, Jack Yaz, thelonelycoder, & Xentrx
#
# Bad ideas and code are entirely mine
#
# install command:
#   curl --retry 3 "https://raw.githubusercontent.com/cynicastic/scribe/master/scribe" -o "/jffs/scripts/scribe" && chmod 0755 /jffs/scripts/scribe && /jffs/scripts/scribe install
#
# shellcheck disable=SC2009
# SC2009 = Consider uing pgrep ~ Note that pgrep doesn't exist in asuswrt
# shellcheck disable=SC2059
# SC2059 = Don't use variables in the printf format string. Use printf "..%s.." "$foo" ~ I try to only embed the ansi color escapes in printf strings


# scribe constants
action="$1"
got_zip="no"
[ -n "$2" ] && [ "$2" = "gotzip" ] && got_zip="yes" && shift
banner="yes"
[ -n "$2" ] && [ "$2" = "nologo" ] && banner="no" && shift
[ -z "$TMP" ] && TMP=/opt/tmp

readonly scribe_name="scribe"
readonly scribe_branch="gamma"
readonly scribe_ver="v0.9_2 ($scribe_branch)"
readonly scribe_author="cynicastic"
readonly scribe_repo="https://raw.githubusercontent.com/$scribe_author/$scribe_name/$scribe_branch/$scribe_name"
readonly scribe_dir="$TMP/$scribe_name-$scribe_branch"
readonly scribe_script="/jffs/scripts/$scribe_name"

# script constants
readonly sng="syslog-ng"
readonly lr="logrotate"
readonly init_d="/opt/etc/init.d"
readonly S01sng_loc="$init_d/S01$sng"
readonly rcfunc_sng="rc.func.$sng"
readonly rcfunc_loc="$init_d/$rcfunc_sng"
readonly syslogngloc="/opt/sbin/$sng"
readonly logrotateloc="/opt/sbin/$lr"
readonly syslogng_conf="/opt/etc/$sng.conf"
readonly sngconf_merged="$TMP/syslog-ng-complete.conf"
readonly logrotate_conf="/opt/etc/$lr.conf"
readonly syslogng_d="/opt/etc/$sng.d"
readonly logrotate_d="/opt/etc/$lr.d"
readonly syslogng_share="/opt/share/$sng"
readonly logrotate_share="/opt/share/$lr"
#
readonly srvc_event="/jffs/scripts/service-event"
readonly postmount="/jffs/scripts/post-mount"
readonly merlin="ASUSWRT-Merlin"

# color constants
readonly red="\033[1;31m"
readonly white="\033[1;37m"
readonly green="\033[1;32m"
readonly yellow="\033[1;33m"
readonly blue="\033[1;34m"
readonly std="\033[m"

# require Entware
if [ ! -x "/opt/bin/opkg" ] || [ "$(uname -o)" != "$merlin" ]
then
    printf "\n\n$red %s with Entware is required - exiting! $std\n\n" "$merlin"
    exit 1
fi

# check if skynet is installed
if grep -q "skynetloc" /jffs/scripts/firewall-start
then
    skynet_installed="yes"
else
    skynet_installed="no"
fi


#### functions ####

alive(){ printf "$green alive. $std\n"; }

dead(){ printf "$red dead. $std\n"; }

finis (){ printf "$green done. $std\n"; }

not_installed(){ printf "\n$blue %s$red NOT$white installed! $std\n" "$1"; }

ver_num(){ echo "$1" | sed 's/v//; s/_/./' | awk -F. '{ printf("%d%02d%02d\n", $1, $2, $3); }'; }

enter_to(){ printf "\n\n$white Press [Enter] to %s $std" "$1"; read -r; echo; }

# Check yes or no
yes_no(){
    read -r resp
    case "$resp" in
        [yY][eE][sS]|[yY])
            true
            ;;
        *)
            false
            ;;
    esac
}

# Note this is not if-then-else; if rm -rf fails, it will try to rm -f, but it doesn't matter here
# shellcheck disable=SC2015
dlt(){ [ -d "$1" ] && rm -rf "$1" || rm -f "$1"; }

# get md5sum of file
md5_file(){ md5sum "$1" | awk '{ printf( $1 ); }'; }

logo(){
    clear
    printf "$white                            _\n"
    printf "                         _ ( )            \n"
    printf "       ___    ___  _ __ (_)| |_      __   \n"
    printf "     /',__) /'___)( '__)| || '_\`\\  /'__\`\\ \n"
    printf "     \\__, \\( (___ | |   | || |_) )(  ___/ \n"
    printf "     (____/\`\\____)(_)   (_)(_,__/'\`\\____) \n"
    printf "     %s and %s installation $std\n" "$sng" "$lr"
    printf "    $green %-15s $blue Coded by cynicastic $std\n\n" "$scribe_ver"
}

getzip(){
    if [ "$got_zip" = "no" ]
    then
        dlt $scribe_dir
        dlt $TMP/$scribe_name.zip
        if curl -fL https://github.com/$scribe_author/$scribe_name/archive/$scribe_branch.zip -o $TMP/$scribe_name.zip
        then
            unzip $TMP/$scribe_name.zip -d $TMP
            opkg update
            got_zip="yes"
        else
            printf "\n$white %s GitHub repository$red is unavailable! $std -- Aborting.\n" "$scribe_name"
            exit 1
        fi
    fi
}

sed_sng(){
    if ! grep -q $rcfunc_sng $S01sng_loc; then sed -i "\~/opt/etc/init.d/rc.func~i . $rcfunc_loc # added by scribe\n" $S01sng_loc; fi
    if ! grep -q $scribe_name $srvc_event; then echo "$scribe_script kill_logger nologo \"\$2\" & # added by scribe" >> $srvc_event; fi
}

lr_cron(){
    # respect user's logrotate cron job if it exists
    if ! grep -q $lr $postmount; then echo 'cru a logrotate "5 0 * * * /opt/sbin/logrotate /opt/etc/logrotate.conf >> /opt/tmp/logrotate.daily 2>&1" # added by scribe' >> $postmount; fi
    if ! cru l | grep -q $lr; then cru a logrotate "5 0 * * * /opt/sbin/logrotate /opt/etc/logrotate.conf >> /opt/tmp/logrotate.daily 2>&1"; fi
}

# setup example files in /usr/share/$1/examples
# install default file in /usr/etc/$1.d
# all files in examples and .d must be 644 or 600
setup_expl(){
    [ "$1" = "$sng" ] && d_dir="$syslogng_d" && share="$syslogng_share" && conf="$syslogng_conf"
    [ "$1" = "$lr"  ] && d_dir="$logrotate_d" && share="$logrotate_share" && conf="$logrotate_conf"
    opkg="$1.conf-opkg"
    conf_opkg="$conf-opkg"

    cp -pu $scribe_dir/"$1".d/* $d_dir/
    chmod 600 $d_dir/*

    [ ! -d $share ] && mkdir $share
    [ ! -d $share/examples ] && mkdir $share/examples
    cp -pf $scribe_dir/"$1".share/* $share/examples/
    
    if [ -e $conf_opkg ]
    then
        cp -pf $conf_opkg $share/examples
        dlt $conf_opkg
    elif [ ! -e $share/examples/"$opkg" ]
    then
        cp -pf $conf $share/examples/"$opkg"
    fi
    
    chmod 600 $share/examples/*
}

force_install(){
    printf "\n$blue %s$white already installed!\n" "$1"
    [ "$1" != "$scribe_name" ] && printf "$yellow Forcing installation may overwrite modified configuration files!\n"
    printf "$white Do you want to force re-installation of %s [y|n]? $std" "$1"
    yes_no
    return $?
}

sng_syntax(){ if syslog-ng -s; then printf "\n$white syslog-ng syntax check$green okay! $std\n\n"; fi }

show_config(){
    if [ -e $syslogngloc ]
    then
        $syslogngloc --preprocess-into=$sngconf_merged && less $sngconf_merged
        true
    else
        not_installed $sng
        false
    fi
}

check_sng_run(){
	printf "\n$white %33s" "Checking $sng daemon..."
    if [ -z "$( pidof $sng )" ]
	then
		dead
        return 1
	else
		alive
	fi
}

check_lr_run(){
	printf "\n$white %33s" "Checking $lr cron job..."
    if cru l | grep -q $lr
	then
		alive
	else
		dead
        return 1
	fi
}

run_logrotate(){
    printf "$white Running %s ..." "$lr" 
    /opt/sbin/logrotate /opt/etc/logrotate.conf >> /opt/tmp/logrotate.daily 2>&1
    printf " Check the output below for errors $std\n\n"
    tail /opt/tmp/logrotate.daily
}

get_vers(){
    scribe_github=$( curl -fsL --retry 3 "$scribe_repo" | grep "scribe_ver=" | grep -m1 -oE 'v[0-9]{1,2}([.][0-9]{1,2})([_][0-9]{1,2})' ) || printf "\n$white %s GitHub repository$red is unavailable! $std -- Aborting.\n" "$scribe_name"
    [ -z "$scribe_github" ] && return 1
    github_ver=$( ver_num "$scribe_github" )
}

prt_vers(){
    printf "\n$white %33s$green %s \n" "scribe installed version:" "$scribe_installed"
    printf "$white %33s$green %s $std\n\n" "scribe GitHub version:" "$scribe_github"
}

menu_status(){
        check_sng_run
        check_lr_run
        get_vers
        prt_vers
}


install(){

#### install sub-functions ####

# determine syslog-ng conf file version
    sng_conf_ver(){ grep '@version:' $syslogng_conf | awk '{ printf( $2 ); }' | awk -F. '{ printf ("%d%03d", $1, $2); }'; }

# setup syslog-ng
    setup_sng(){
        printf "\n$white setting up syslog-ng ..."
        cp -pu $scribe_dir/init.d/$rcfunc_sng $init_d/
        chmod u=rw,go=r $rcfunc_loc
        sed_sng

        if [ "$( md5_file $syslogng_share/examples/$sng.conf-scribe )" != "$( md5_file $syslogng_conf )" ]
        then
            printf " backing up %s to %s ..." "$syslogng_conf" "$syslogng_conf-prev"
            cp -pf $syslogng_conf $syslogng_conf-prev
            cp -pf $syslogng_share/examples/$sng.conf-scribe $syslogng_conf
            printf "\n\n$white NOTE: The syslog-ng.conf file provided by the Entware syslog-ng package does not function \n"
            printf " correctly on asuswrt due to a conflict with klogd.$blue A replacement syslog-ng.conf has been\n"
            printf " installed$white at %s that corrects this conflict and also corrects other\n" "$syslogng_conf"
            printf " issues with the syslog-ng.conf file provded by the package. The syslog-ng.conf file provided\n"
            printf " by the Entware package has been moved to $std%s$white.\n" "$syslogng_share/examples/$sng.conf-opkg"
            printf "\n Installation"
        fi
        finis
    }

# setup logrotate
    setup_lr(){
        # assumes since entware is required / installed, post-mount exists and is properly executable
        printf "$blue adding %s cron job$white ..." "$lr"
        lr_cron
        finis
    }

#### install main routine ####

    force=""
    [ "X$2" = "XFORCE" ] && force="--force-reinstall"

    printf "$white setting up %s ..." "$1"
    opkg install $force "$1" 
    [ "$1" = "$sng" ] && [ "$(sng_conf_ver)" -lt "3019" ] && printf "$white syslog-ng version 3.19 or higher required!\n Please update your Entware packages and run scribe install again.$std\n\n" && exit 1
    setup_expl "$1"
    [ "$1" = "$sng" ] && setup_sng
    [ "$1" = "$lr"  ] && setup_lr
    menu_status
}

setup_scribe(){
    printf "$white setting up %s ..." "$scribe_name"
    cp -pf "$scribe_dir/$scribe_name" "$scribe_script"
    chmod 0755 $scribe_script
    [ ! -e "/opt/bin/$scribe_name" ] && ln -s $scribe_script /opt/bin
    if [ "$skynet_installed" = "yes" ]
    then
        if [ ! -e "$syslogng_d/skynet" ]
        then
            cp -pu $syslogng_share/examples/skynet $syslogng_d 
            printf "$blue setting skynet log file location$white ..."
            skynetlog=$( grep 'file("' $syslogng_d/skynet | awk -F\" '{ printf ( $2 ); }'; )
            sh /jffs/scripts/firewall settings syslog "$skynetlog" > /dev/null 2>&1
        fi
    else
        printf "$red Skynet NOT installed$white ..."
    fi
    finis
}

no_skynet(){
    printf "\nSkynet is$red NOT$std installed on this system!\n"
    printf "If Skynet is installed at a later date, re-run this\n"
    printf "script and force installation of %s to log the\n" "$scribe_name"
    printf "iptables messages used by Skynet to their own logfile.\n"
    enter_to continue
}

sng_start(){ printf "$yellow Starting %s ... $std\n" "$sng"; $S01sng_loc start; }

menu_restart(){
    if check_sng_run
    then
        printf "$yellow Restarting ... $std\n" "$sng"
        $S01sng_loc restart
        return 0
    else
        printf "$white %s$red NOT$white running! " "$sng"
    fi
    sng_start
}

uninstall(){
    [ -n "$( pidof $sng )" ] && $S01sng_loc stop
    service start_logger
    if [ -e $syslogngloc ]
    then
        sed -i "/$scribe_name/d" $srvc_event
        dlt $S01sng_loc
        dlt $rcfunc_loc
        dlt /tmp/syslog.log
        dlt /jffs/syslog.log
        dlt /jffs/syslog.log-1
        opkg remove "$sng"
        dlt $syslogng_d
        dlt $syslogng_share
        dlt $syslogng_conf
        dlt /tmp/syslog.log
        [ "$skynet_installed" = "yes" ] && sh /jffs/scripts/firewall settings syslog /tmp/syslog.log > /dev/null 2>&1
    else
        not_installed "$sng"
    fi

    if [ -e $logrotateloc ]
    then
        sed -i "/cru a $lr/d" $postmount
        if cru l | grep -q $lr; then cru d $lr; fi
        opkg remove "$lr"
        dlt $logrotate_d
        dlt $logrotate_share
        dlt $logrotate_conf
    else
        not_installed "$lr"
    fi
    dlt $TMP/$scribe_name.zip
    dlt $TMP/$scribe_name-$scribe_branch

    dlt /opt/bin/$scribe_name
    dlt $scribe_script

    printf "\n$white $sng, $lr, and $scribe_name have been removed from the system.\n"
    printf " The router will now reboot to ensure the default syslogd is properly started.\n"
    enter_to "reboot"
    service reboot; exit 0
}

menu_uninstall(){
    printf "\n\n$white"
    printf "                *********************\n"
    printf "                ***$red W*A*R*N*I*N*G$white ***\n"
    printf "                *********************\n\n"
    printf "    This will remove the $yellow $sng $white and $yellow $lr $white packages!!\n"
    printf "    Ensure you have backed up any configuration files you wish\n"
    printf "    to keep.  All configuration files in $yellow $syslogng_d $white \n"
    printf "    and $yellow $logrotate_d $white will be deleted!\n\n"
    printf "                *********************\n"
    printf "                ***$red W*A*R*N*I*N*G$white ***\n"
    printf "                *********************\n\n"
    printf "Are you SURE you want to uninstall $scribe_name (type YES to uninstall)? $std"
    read -r wipeit
    case "$wipeit" in
        YES)
            uninstall
            ;;
        *)
            printf "\n\n$white *** UNINSTALL ABORTED! ***$std\n\n"
            ;;
    esac
}

menu_filters(){
    getzip
    # ugly hack to harmonize filenames
    [ -e $syslogng_d/crashes ] && [ ! -e $syslogng_d/crash ] && [ -z "$( diff $syslogng_d/crashes $scribe_dir/$sng.d/crash )" ] && dlt $syslogng_d/crashes
    setup_expl "$sng"
    setup_expl "$lr"
    if ! grep -q $rcfunc_loc $S01sng_loc; then sed_sng; lr_cron; fi

    printf "\n$white %s and %s example files updated!$std\n" "$sng" "$lr"
}

menu_update(){
    inst="no"
    upd="no"
    if [ "$installed_ver" -lt "$github_ver" ]
    then
        printf "\n$white New version available!\n"
        printf " Do you wish to upgrade [y|n] $std"
    else
        printf "\n$white No new version available. (GitHub version"
        [ "$installed_ver" -eq "$github_ver" ] && printf " equal to " || printf "$red LESS THAN$white "
        printf "local version)\n"
        printf " Do you wish to force re-installation of scribe script? [y|n] $std"
    fi
    if yes_no; then inst="yes"; fi
    printf "\n$white Do you want to update %s and %s example files? [y|n] $std" "$sng" "$lr"
    if yes_no; then upd="yes"; fi

    if [ "$inst" = "yes" ]
    then
        getzip
        setup_scribe
        printf "\n$white $scribe_name updated!$std\n"
        [ $upd = "yes" ] && sh /jffs/scripts/"$scribe_name" filters gotzip nologo
        exit 0
    else
        printf "\n$white $scribe_name$red not$white updated!$std\n"
    fi

    if [ "$upd" = "yes" ]
    then
        menu_filters
    else
        printf "\n$white %s and %s example files$red not$white updated!$std\n" "$sng" "$lr"
    fi
}

gather_debug(){
    scribe_debug_name=$scribe_name"_debug.log"
    scribe_debug=$TMP/$scribe_debug_name
    [ -z "$(nvram get odmpid)" ] && model="$(nvram get productid)" || model="$(nvram get odmpid)"
    printf "\n$white gathering debugging information ..."
    printf "### Scribe Version: %s\n" "$scribe_ver" > $scribe_debug

    # everything between { } goes to $scribe_debug
    {
        printf "### Scribe md5: %s\n" "$( md5sum $scribe_script )"
        printf "### Router: %s (%s)\n" "$model" "$(uname -m)"
        printf "### Firmware Version: %s %s\n" "$(uname -o)" "$(nvram get buildno)"
        printf "\n### check running processes:\n"
        ps | grep "syslog"
        printf "\n### check crontab:\n"
        cru l | grep $lr
        printf "\n### directory check:\n"
        ls -ld /tmp/syslog*
        ls -ld /jffs/syslog*
        printf "\n### top output:\n"
        top -b -n1 | head
        printf "\n### *log references in top:\n"
        top -b -n1 | grep log
        printf "\n### init.d directory:\n"
        ls -l /opt/etc/init.d
        printf "\n### contents of S01syslog-ng\n"
        cat /opt/etc/init.d/S01syslog-ng
        printf "\n### /opt/var/log directory:\n"
        ls -l /opt/var/log
        printf "\n### installed packages:\n"
        opkg list-installed
    } >> $scribe_debug

    printf "\n### syslog-ng syntax check:\n" >> $scribe_debug
    if syslog-ng -s > /dev/null 2>&1
    then
	    $syslogngloc --preprocess-into=$sngconf_merged > /dev/null 2>&1
        {
            printf "syslog-ng syntax check okay!\n"
            printf "\n### syslog-ng config:\n"
            cat $sngconf_merged
        } >> $scribe_debug

    else
        syslog-ng -s >> $scribe_debug 2>&1
        printf "**** SYSLOG-NG SYNTAX CHECK FAILED! SEE ABOVE ****\n" >> $scribe_debug
    fi

    if [ "$skynet_installed" = "yes" ]
    then
        skynetloc="$(grep -ow "skynetloc=.* # Skynet" /jffs/scripts/firewall-start 2>/dev/null | grep -vE "^#" | awk '{print $1}' | cut -c 11-)"
        skynetcfg="${skynetloc}/skynet.cfg"
        {
            printf "\n### Skynet log locations:\n"
            grep "syslog" "$skynetcfg"
        } >> $scribe_debug
    else
        printf "\n### Skynet not installed.\n"
    fi

    printf "\n### end of output ###\n" >> $scribe_debug
    redact=$(echo "$USER" | awk  '{ string=substr($0, 1, 8); print string; }' )
    sed -i "s/$redact/redacted/g" "$scribe_debug"
    printf " taring the output ..."
    tar -zcvf $scribe_debug.tar.gz -C $TMP $scribe_debug_name > /dev/null 2>&1
    finis

    printf " Debug output stored in %s, please review this file\n" "$scribe_debug"
    printf " to ensure you understand what information is being disclosed.\n\n"
    printf " Tarball of debug output is %s.tar.gz \n" "$scribe_debug"
}

scribe_menu(){
	printf "\n$yellow menu not yet implemented $std\n\n"
}


##############
#### MAIN ####
##############

# get installed scribe version if installed
scribe_installed="$red Not Installed"
[ -e $scribe_script ] && scribe_installed=$( grep "scribe_ver=" $scribe_script | grep -m1 -oE 'v[0-9]{1,2}([.][0-9]{1,2})([_][0-9]{1,2})' )
installed_ver=$( ver_num "$scribe_installed" )

# save a spot for going to the menu (v.2 feature)
# if [ "X$action" = "X" ]
# then
# 	scribe_menu
# fi

[ "$banner" != "no" ] && logo

case $action in

# install syslog-ng, logrotate, & scribe script
        install)
        getzip

        if [ ! -e $syslogngloc ]
        then
            install "$sng"
        elif force_install "$sng"
        then
            $S01sng_loc stop
            install "$sng" "FORCE"
        fi
        sng_start

        if [ ! -e $logrotateloc ]
        then
            install "$lr"
        elif force_install "$lr"
        then
            install "$lr" "FORCE"
        fi
        run_logrotate

        if [ ! -e "/opt/bin/$scribe_name" ]
        then
            setup_scribe
        elif force_install "$scribe_name"
        then
            setup_scribe
        fi

        [ "$skynet_installed" = "no" ] && no_skynet
        ;;

# uninstall scribe
    uninstall | remove)
        menu_uninstall
        ;;

# update scribe

    update)
        get_vers
        prt_vers
        menu_update
        ;;

# update syslog-ng and logrotate filters
    update-filters | filters)
        menu_filters
        ;;

# show total combined config
    show-config | config)
        if show_config; then sng_syntax; fi
        ;;

# check syntax
    check-syntax | syntax)
        sng_syntax
        ;;

# verify syslog-ng is running and logrotate is listed in 'cru l'
    status)
        menu_status
        ;;

# restart (or start if not running) syslog-ng
    restart)
        menu_restart
        menu_status
        ;;

# generate debug tarball
    debug)
        gather_debug
        ;;

# kill syslogd & klogd - only available via cli
    kill_logger)
        [ "$2" != "logger" ] && exit 0
        # shellcheck disable=SC1091
        # shellcheck source=/opt/etc/init.d/rc.func.syslog-ng
        . $rcfunc_loc
        count=60
        while [ $count -gt 0 ]
        do
            sleep 1 # give them a moment to start up, assumes both are started
            if ps | grep -q klogd && ps | grep -q syslogd; then kill_logger; exit 0; fi
            count=$(( count - 1 ))
        done
        logger -t "$scribe_name" "FAILED to kill klogd and/or syslogd!"
        ;;
        
# unrecognized command
    *)
        printf "\n$white Usage: $0 ( install | uninstall | update | update-filters | show-config | check-syntax | status | restart | debug )$std\n\n"
        exit 1
        ;;
esac

printf "\n\n"
#eof
